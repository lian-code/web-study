ES6中的面对对象：
一 . 面对对象编程具有：封装性；继承性；多态性。

二 . ES6中的类跟对象：
  1.ES6的类对比ES5的构造函数，类其实就是语法糖。
  2.类用class声明，抽象了对象的公共部分，之后通过这个类来实例化对象。
  3.对象是类的实例化对象，有属性跟方法组成。
  4.constructor构造函数：是类的默认方法，实例化对象即调用这个函数，这个函数可以传参。
  5.类添加方法：方法之间不用标点符号分割，方法不需要添加function关键字。
  6.this指向constructor中this指向实例对象；普通函数方法中的this指向调用者。

三 . 类的继承：
  1. 语法：class Father {//父类); class Son extends Father {子类继承父类);
  2. super()用于在子类有自己的constructor构造函数时访问跟调用父类的函数，super(父类函数参数)要写在子类自定义属性之前；    还可以调用父类的普通函数：super.say()。

——————————————————————————————————
ES5的构造函数和原型：
一 . 构造函数和原型：
  1.静态成员：在构造函数本身上添加的成员称为静态成员，只能通过构造函数本身来访问； 实例成员：在构造函数内部创建的对象成员称为实例成员，只能通过实例化的对象来访问。
  2.构造函数创建的每个实例对象中的方法都自己生成一个空间。
  3.构造函数原型prototype原型对象：把不变的方法定义在prototype上，这样所有实例对象可以共享方法。
  4.__proto__对象原型：实例对象中都有__proto__对象原型，指向构造函数的prototype原型对象。
  5.constructor构造函数：构造函数中原型对象，跟实例对象中的对象原型中都有constructor，它指向构造函数本身，所以叫做构造函数。
  6.如果给构造函数中的prototype添加以对象形式的属性方法，会覆盖里边的constructor指向，要重新添加constructor指向。
  7.实例对象属性查找机制：1.构造函数本身；2.构造函数中的原型对象prototype；3.构造函数中的原型对象prototype中的对象原型__proto__。
  8.原型对象prototype中的this指向调用者，也就是实例对象。
  9.数组/对象这些构造函数的方法都放在原型对象prototype中，我们可以给原型对象添加方法，给实例对象(创建的数组对象即为实例对象)使用。注意：方法中实例对象直接用this，即实例对象在方法中为this。

二 . 继承：
  1.没有ES6的extends继承，我们通过构造函数(call())+原型对象(prototype)。
   2.继承非原型对象内容，call(this指向(直接写this指向本身)，参数)。
  3.继承原型对象内容，Son.prototype = new Father()。子构造函数的原型对象等于父构造函数实例对象，这样更改子原型对象内容不会更改父原型对象。

三 . ES5中的新增方法：
  1.数组方法：
	forEach()遍历：arr.forEach(function(value,index,array) { });
	filter()返回符合条件新数组：arr.filter(function(value,index,array) {return value > 10});
	map()返回每个元素执行函数后的形成的新数组：arr.map(value => value * 2);//反悔所有数组元素乘以2的新数组。
	some()返回条件正确与否布尔值：arr.some(function(value,index,array) {return value > 10}); //如果其中有大于10,的，返回true;
	every()所有每个元素都通过条件，即返回true；一个不通过即返回false：arr.every(value => value > 4)。若let arr = [5,6,7]，则返回true；若let arr = [4,5,6,7];则返回false。如果数组是空数组，无论如何都返回true。
  2.字符串方法：trim()：str.trim()。返回一个删除两端空白的新字符串，一般用于获取文本框字符。
  3.对象方法：
	Object.kets(obj);以数组的形式返回对象的所有属性。
	Object.defineProperty(obj,'property','{value:'修改或者定义的值'}');最后面对象参数中有多个属性：writable,可写的，默认false就是不能重新修改的；enumerable,可数的，默认false就是遍历属性是默认没有这个属性的。configurable,可配置的，默认false,不能删除此属性。
——————————————————————————————
函数进阶：
一 . this指向：
	1.函数内this得指向：普通函数调用：window；构造函数调用：实例对象，原型对象方法也指向实例对象；对象方法调用：指向这个对象；事件绑定方法：绑定事件对象；定时器函数：window；立即执行函数：window。
	2.改变函数内部this指向：call()调用函数修改this指向传参，如：fn.call(obj)；apply()调用函数修改this指向参数可以传递数组，用于求数组中最大/小数值，如：Math.max.apply(null,[1,2,3,4])；bind()改this指向但是不调用函数，想改但不调用时可以使用bind()，比如改变定时器内部的this指向的时候。

二 . 严格模式：
  1.严格模式语法：在脚本最前面写 "ues strict";
  2.开启严格模式：2.1.为整个脚本开启：因为有的script脚本是正常模式有的是严格模式，所以为整个脚本开启严格模式最好写在一个立即执行函数中，有利于多个脚本文件合并；2.2.为个别函数开启：严格模式语法写在函数开头。
  3.严格模式的变化：
	3.1.不允许为声明变量。
	3.2不允许删除变量或者函数。
	3.3不允许变量名/参数名重名。
	3.4不允许删除一个不允许删除的属性。
	3.5不允许赋值一个不允许赋值的属性:
  4.严格模式下this指向问题：4.1全局作用域中函数this指向是undefined。4.2构造函数内部定义this的属性后不实例化对象，直接调用构造函数后会报错，因为构造函数中this指向undefined,给undefined添加属性肯定不行。
  5.高阶函数：接收函数作为参数或将函数作为返回值输出。
  6.闭包：6.1闭包（closure）指有权访问另一个函数作用域中变量的函数。实例：        function fn() { //这是一个闭包
            let num = 10;

            function fnn() {
                console.log(num); //访问了fn()函数的num
            };
            fnn();
        };
        fn();
//控制台断点，执行到fnn()是就会产生闭包Closure。
     6.2闭包的作用是 延伸变量的作用范围。
  
  7.递归：就是在函数内部自己调用自己，因为容易发生栈溢出，所以必须要加退出条件 return。
——————————————————————————————
正则表达式：
  一 . 正则表达式通常用于检索跟替换文本，例如表单验证跟敏感词过滤。
  二 . 在javascript的使用：2.1创建正则表达式：通过RegExp构造函数创建实例对象；通过字面量创建：var variable = /表达式/。2.1测试正则表达式test：RegExp.test(要检测的字符串)，返回布尔值。
  三 . 特殊字符：
	3.1边界符：^表示以谁开始；$表示以谁结束。
	3.2字符类：3.2.1中括号[ ]，比如[abc],测试它只要包含abc其中一个字符就返回true；但是没有中括号的abc，要包含abc整个字符串才返回true。实例：console.log(/^[abc]$/.test('a'));//true。console.log(/^abc$/.test('a'));//false。console.log(/^abc$/.test('abc'));//true。
		3.2.2方括号：范围符-：方括号内部加上 - 表示范围，这里表示 a 到 z 26个英文字母都可以，实例：/^[a-z]$/。取反符^：方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false，实例：/[^abc]/.test('andy') // false。
	3.3预定义类：某些常见模式的简写模式：（\d相当于[0-9]；\D相当于[^0-9]；\w相当于[a-zA-Z0-9_]；\W相当于[^a-zA-Z0-9_]；\s相当于换行制表空格[\t\r\n\v\f]；\S相当于[^\t\r\n\v\f]。）
  四 . 正则表达式中的替换：
	4.1语法：str.replace(正则表达式被替换的字符串，替换的字符串)；返回新的字符串。
	4.2替换中的正则表达式参数：实例：str.replace(/字符串1|字符串2|字符串3/[g(全局匹配);i(忽略大小写);gi(全局匹配+忽略大小写)],'替换字符串');
——————————————————————————————
ES6：
  一 . ES6简介：
  二 . ES6的新增语法：
	2.1 let关键字：块级作用域；循环作用域；在相同的作用域或块级作用域中，不能使用 let 关键字来重置let / var 关键字声明的变量；没有变量提升。
	2.2 const常量：块级作用域；在相同的作用域或块级作用域中，不能使用 const 关键字来重置 var / let / const关键字声明的变量；必须初始化，也就是声明并赋值；声明赋值后不可以再次修改值；并非真正的常量，只是不能更改整个值，也就是值的地址，但是可以修改值的内部，比如对象中的属性可以更改，但是不能整个对象都更换。
	2.3解构赋值：2.3.1数组解构：let [a,b,c] = [1,2,3]; console.log(a);//输出1；
		      2.3.2对象解构：同名：let {name,age} = {name:'lian',age:20}; console.log(name);//输出lian；
			               自定义名：let {name:uname,age:uage} = {name:'lian',age:20}; console.log(uname);//输出lian；
	2.4箭头函数：2.4.1语法：() => {}; 
		      2.4.2简写：参数只有一个，或者函数体只有一句代码并且执行结果是返回值。实例：(num) => {return num}; 即可以写成：num => num;
  三 . ES6的内置对象：




	

 
