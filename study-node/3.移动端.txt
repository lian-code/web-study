移动端声明：<meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no" />
移动WEB开发之流式布局
=============================
移动WEB开发之flex弹性布局：【1.flex布局原理   2. flex 布局父项常见属性   3.flex 布局子项常见属性】

1. flex布局原理：【通过给父盒子添加flex属性(display: flex;)，来控制子盒子的位置和排列方式】

2. flex 布局父项常见属性：
    flex-direction：(设置主轴的方向)【row默认值从左到右。colum从上到下。row-reverse从右到左。column-reverse 从下到上。】
    flex-wrap：(设置子元素是否换行)【nowrap 默认值，不换行wrap】
 flex-flow：(复合属性，相当于同时设置了 flex-direction 和 flex-wrap)【flex-wrap: row wrap;】
    justify-content：(设置主轴上的子元素排列方式)【flex-start默认值从头部开始,如果主轴是x轴,则从左到右。
					flex-end从尾部开始排列。
					center在主轴居中对齐,如果主轴是x轴,则水平居中。
					space-around 平分剩余空间。
					space-between 先两边贴边 再平分剩余空间（重要）】
    align-content：(设置侧轴上的子元素的排列方式(多行))【flex-start 默认值在侧轴的头部开始排列
					        	flex-end 在侧轴的尾部开始排列
						center 在侧轴中间显示
						space-around 子项在侧轴平分剩余空间
						space-between 子项在侧轴先分布在两头，再平分剩余空间
						stretch 设置子项元素高度平分父元素高度】
 align-items：(设置侧轴上的子元素排列方式(单行))
    

3. flex 布局子项常见属性：
     flex(子项目占的份数)【flex: number/百分比;】
 order(属性定义子项的排列顺序（前后顺序）)【order: number;数值越小，排列越靠前，默认为0。注意：和 z-index 不一样。】
 align-self(控制子项自己在侧轴的排列方式)【flex-start 从上到下
					flex-end 从下到上
					center 挤在一起居中（垂直居中）
					stretch 拉伸 （默认值 ）】
=============================
移动WEB开发之rem布局:【宽高文字随设备宽度增大而增大 减小而减小】
1. rem 基础
	rem 单位
	【rem (root em)是一个相对单位，类似于em，em是父元素字体大小。
	不同的是rem的基准是相对于html元素的字体大小。
	比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。
	rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小。】
2. 媒体查询：
	媒体查询（Media Query）是CSS3新语法
	【@media scree and (min-width: 100px;) {
				html {
					font-size: 100 / 15rem;
			}
		}】
	2.3 媒体查询+rem实现元素动态大小变化
	rem单位是跟着html来走的，有了rem页面元素可以设置不同大小尺寸
	媒体查询可以根据不同设备宽度来修改样式
	媒体查询+rem 就可以实现不同设备宽度，实现页面元素大小的动态变化
	2.4 引入资源（理解）
	当样式比较繁多的时候，我们可以针对不同的媒体使用不同 stylesheets（样式表）。
	原理，就是直接在link中判断设备的尺寸，然后引用不同的css文件。
	1. 语法规范
	<link rel="stylesheet" media="mediatype and|not|only (media feature)" href="mystylesheet.css">
	2. 示例
	<link rel="stylesheet" href="styleA.css" media="screen and (min-width: 400px)">
3. Less 基础
	3.1 Less 变量 【@color: pink;】
	3.2 变量使用规范
	body{
	 color:@color;
	}
	3.3 Less 编译
	本质上，Less 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则
	最终会通过解析器，编译生成对应的 CSS 文件。所以，我们需要把我们的 less文件，编译生成为css文件，这样我们的html页面才能使用
	3.4 Less 嵌套写法
	header {
		 .logo {
			 width: 300px;
			 }
		}
	3.5 Less 运算 ★
	任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。
	运算符中间左右有个空格隔开 1px + 5
	 对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位
	 如果两个值之间只有一个值有单位，则运算结果就取该单位
=============================
移动WEB开发之响应式bootstrap布局：【配合媒体查询】
1. 响应式开发原理
【超小屏幕（手机） < 768px
   小屏设备（平板） >= 768px ~ < 992px
  中等屏幕（桌面显示器） >= 992px ~ <1200px
  宽屏设备（大桌面显示器） >= 1200px】
【平时屏幕设置：超小屏幕（手机，小于 768px）：设置宽度为 100%
 小屏幕（平板，大于等于 768px）：设置宽度为 750px
 中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px
 大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px】
2. Bootstrap前端开发框架
    2.1 Bootstrap 使用四步曲： 1. 创建文件夹结构 2. 创建 html 骨架结构 3. 引入相关样式文件 4. 书写内容
    2.2 html骨架：【 <!--[if lt IE 9]>
 <!--解决ie9以下浏览器对html5新增标签的不识别，并导致CSS不起作用的问题-->
 <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
 <!--解决ie9以下浏览器对 css3 Media Query 的不识别 -->
 <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
 <![endif]-->】
    2.3 布局容器：
         2.3.1  container 类 【响应式布局的容器 固定宽度。大屏 ( >=1200px) 宽度定为 1170px。中屏 ( >=992px) 宽度定为 970px。小屏 ( >=768px) 宽度定为 750px。超小屏 (100%)】
         2.3.2  container-fluid 类 【流式布局容器 百分百宽度。占据全部视口（viewport）的容器。】【移动端开发】
3.  Bootstrap 栅格系统
     3.1简介：【 把屏幕分为12份 行（row）与列（column）的组合来创建页面布局】
     3.2参数：【超小屏(手机)< 768px：.col-xs-。小屏设备(平板)>=768px：.col-sm-。中等屏幕(桌面显示器)>=992px：.col-md-。宽屏设备(大桌面显示器)>=1200px：.col-lg-】
               【按照不同屏幕划分为1~12 等份
               行（row） 可以去除父容器作用15px的边距
               xs-extra small：超小； sm-small：小； md-medium：中等； lg-large：大；
               列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列
               每一列默认有左右15像素的 padding
               可以同时为一列指定多个设备的类名，以便划分不同份数 例如 class="col-md-4 col-sm-6"】
     3.3列嵌套：【栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 .row 元素和一系列 .col-sm-* 元素到已经存在的 .col-sm-* 元素内。】
     3.4列偏移：【使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。col-lg-offset-4】
     3.5列排序：【通过使用 .col-md-push-(向右推)和 .col-md-pull-(向左拉) 类就可以很容易的改变列（column）的顺序。】
     3.6响应式工具：【隐藏：.hidden-xs(手机)，.hidden-sm(平板)，.hidden-md(中屏)，.hidden-lg(电脑)】     
  